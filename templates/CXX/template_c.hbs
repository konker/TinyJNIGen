/*! DO NOT EDIT THIS FILE: GENERATED BY JNIGen */

#include "{{fname}}.h"
#include "jni_util.h"
#include "CHybridApplication.h"


{{iname}}::{{iname}}(JavaVM *vm)
{
    mJavaVM = vm;
    LOGD("{{iname}} ctor: %p", mJavaVM);
}

{{iname}}::~{{iname}}()
{ }

{{#each methods}}
/* {{.}} */
{{returnTypeMapped}} {{iname}}::{{name}}({{#unless isStatic}}const jobject thiz{{/unless}}{{#each parameterTypes}}{{#unless isStatic}},{{else}}{{^@first}},{{/first}}{{/unless}}{{typeMapped}} p{{@index}}{{/each}})
{
    if (!mJavaVM) {
        LOGE("{{name}}: failed: no mJavaVM");
        {{#if isVoid}}return{{else}}return {{returnTypeIdentityValue}}{{/if}};
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("{{name}}: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("{{name}}: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            {{#if isVoid}}return{{else}}return {{returnTypeIdentityValue}}{{/if}};
        }
    }

    jclass localClass = CHybridApplication::getInstance().findClass(env, "{{classPath}}");
    if (!localClass) {
        LOGE("{{name}}: failed to get class for {{classPath}}");
        mJavaVM->DetachCurrentThread();
        HANDLE_EXCEPTION(env);
        {{#if isVoid}}return{{else}}return {{returnTypeIdentityValue}}{{/if}};
    }

    {{#if isStatic}}
    jmethodID localMethodID = env->GetStaticMethodID(
    {{else}}
    jmethodID localMethodID = env->GetMethodID(
    {{/if}}
                                localClass,
                                "{{name}}",
                                "{{JNISignature}}");
    if (!localMethodID) {
        LOGE("{{name}}: failed to get methodID");
        mJavaVM->DetachCurrentThread();
        HANDLE_EXCEPTION(env);
        {{#if isVoid}}return{{else}}return {{returnTypeIdentityValue}}{{/if}};
    }

    {{#each parameterTypes}}{{#if isString}}
    // Create a string and call the Java method
    jstring js_p{{@index}} = env->NewStringUTF(p{{@index}});
    {{/if}}{{/each}}

    {{#unless isVoid}}{{returnTypeMapped}} ret = {{/unless}}
    {{#if returnTypeIsString }}static_cast<jstring>({{/if}}
    {{#if isStatic}}
    env->{{callMethod}}(localClass, localMethodID
    {{else}}
    env->{{callMethod}}(thiz, localMethodID
    {{/if}}
        {{#each parameterTypes}}
        ,{{#if isString}}js_p{{@index}}{{else}}p{{@index}}{{/if}}
        {{/each}}
    )
    {{#if returnTypeIsString }}){{/if}}
    ;

    {{#each parameterTypes}}
    {{#if isString}}env->DeleteLocalRef(js_p{{@index}});
    {{else}}{{#if isObject}}env->DeleteLocalRef(p{{@index}});{{/if}}
    {{/if}}
    {{/each}}

    {{#unless isVoid}}return ret;{{/unless}}
}
{{/each}}

