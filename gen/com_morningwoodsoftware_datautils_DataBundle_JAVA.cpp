/*! DO NOT EDIT THIS FILE: GENERATED BY JNIGen */

#include "com_morningwoodsoftware_datautils_DataBundle_JAVA.h"
#include "jni_util.h"
#include "JavaApplication.h"


com_morningwoodsoftware_datautils_DataBundle::com_morningwoodsoftware_datautils_DataBundle(JavaVM *vm)
{
    mJavaVM = vm;
    LOGD("com_morningwoodsoftware_datautils_DataBundle ctor: %p", mJavaVM);
}

com_morningwoodsoftware_datautils_DataBundle::~com_morningwoodsoftware_datautils_DataBundle()
{ }


/* public java.lang.String com.morningwoodsoftware.datautils.DataBundle.getString(java.lang.String,java.lang.String) */
const char* com_morningwoodsoftware_datautils_DataBundle::getString(jobject thiz,const char* p0,const char* p1)
{
    if (!mJavaVM) {
        LOGE("getString: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getString: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getString: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getString: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getString",
                                "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
    if (!localMethodID) {
        LOGE("getString: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    
    // Create a string and call the Java method
    jstring js_p1 = env->NewStringUTF(p1);
    

    return
    
    env->CallObjectMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,js_p1
        
    );
}

/* public java.lang.String com.morningwoodsoftware.datautils.DataBundle.getString(java.lang.String) */
const char* com_morningwoodsoftware_datautils_DataBundle::getString(jobject thiz,const char* p0)
{
    if (!mJavaVM) {
        LOGE("getString: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getString: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getString: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getString: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getString",
                                "(Ljava/lang/String;)Ljava/lang/String;");
    if (!localMethodID) {
        LOGE("getString: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallObjectMethod(thiz, localMethodID
    
        
        ,js_p0
        
    );
}

/* public com.morningwoodsoftware.datautils.DataBundle com.morningwoodsoftware.datautils.DataBundle.getBundle(java.lang.String) */
jobject com_morningwoodsoftware_datautils_DataBundle::getBundle(jobject thiz,const char* p0)
{
    if (!mJavaVM) {
        LOGE("getBundle: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getBundle: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getBundle: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getBundle: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getBundle",
                                "(Ljava/lang/String;)Lcom/morningwoodsoftware/datautils/DataBundle;");
    if (!localMethodID) {
        LOGE("getBundle: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallObjectMethod(thiz, localMethodID
    
        
        ,js_p0
        
    );
}

/* public void com.morningwoodsoftware.datautils.DataBundle.putString(java.lang.String,java.lang.String) */
void com_morningwoodsoftware_datautils_DataBundle::putString(jobject thiz,const char* p0,const char* p1)
{
    if (!mJavaVM) {
        LOGE("putString: failed: no mJavaVM");
        return;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("putString: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("putString: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("putString: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "putString",
                                "(Ljava/lang/String;Ljava/lang/String;)V");
    if (!localMethodID) {
        LOGE("putString: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    
    // Create a string and call the Java method
    jstring js_p1 = env->NewStringUTF(p1);
    

    
    
    env->CallVoidMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,js_p1
        
    );
}

/* public void com.morningwoodsoftware.datautils.DataBundle.putDataBundle(java.lang.String,com.morningwoodsoftware.datautils.DataBundle) */
void com_morningwoodsoftware_datautils_DataBundle::putDataBundle(jobject thiz,const char* p0,jobject p1)
{
    if (!mJavaVM) {
        LOGE("putDataBundle: failed: no mJavaVM");
        return;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("putDataBundle: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("putDataBundle: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("putDataBundle: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "putDataBundle",
                                "(Ljava/lang/String;Lcom/morningwoodsoftware/datautils/DataBundle;)V");
    if (!localMethodID) {
        LOGE("putDataBundle: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    
    
    env->CallVoidMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public void com.morningwoodsoftware.datautils.DataBundle.remove(java.lang.String) */
void com_morningwoodsoftware_datautils_DataBundle::remove(jobject thiz,const char* p0)
{
    if (!mJavaVM) {
        LOGE("remove: failed: no mJavaVM");
        return;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("remove: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("remove: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("remove: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "remove",
                                "(Ljava/lang/String;)V");
    if (!localMethodID) {
        LOGE("remove: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    
    
    env->CallVoidMethod(thiz, localMethodID
    
        
        ,js_p0
        
    );
}

/* public java.lang.Object com.morningwoodsoftware.datautils.DataBundle.get(java.lang.String) */
jobject com_morningwoodsoftware_datautils_DataBundle::get(jobject thiz,const char* p0)
{
    if (!mJavaVM) {
        LOGE("get: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("get: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("get: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("get: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "get",
                                "(Ljava/lang/String;)Ljava/lang/Object;");
    if (!localMethodID) {
        LOGE("get: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallObjectMethod(thiz, localMethodID
    
        
        ,js_p0
        
    );
}

/* public synchronized java.lang.String com.morningwoodsoftware.datautils.DataBundle.toString() */
const char* com_morningwoodsoftware_datautils_DataBundle::toString(jobject thiz)
{
    if (!mJavaVM) {
        LOGE("toString: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("toString: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("toString: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("toString: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "toString",
                                "()Ljava/lang/String;");
    if (!localMethodID) {
        LOGE("toString: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    

    return
    
    env->CallObjectMethod(thiz, localMethodID
    
        
    );
}

/* public boolean com.morningwoodsoftware.datautils.DataBundle.getBoolean(java.lang.String) */
bool com_morningwoodsoftware_datautils_DataBundle::getBoolean(jobject thiz,const char* p0)
{
    if (!mJavaVM) {
        LOGE("getBoolean: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getBoolean: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getBoolean: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getBoolean: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getBoolean",
                                "(Ljava/lang/String;)Z");
    if (!localMethodID) {
        LOGE("getBoolean: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallBooleanMethod(thiz, localMethodID
    
        
        ,js_p0
        
    );
}

/* public boolean com.morningwoodsoftware.datautils.DataBundle.getBoolean(java.lang.String,boolean) */
bool com_morningwoodsoftware_datautils_DataBundle::getBoolean(jobject thiz,const char* p0,bool p1)
{
    if (!mJavaVM) {
        LOGE("getBoolean: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getBoolean: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getBoolean: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getBoolean: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getBoolean",
                                "(Ljava/lang/String;Z)Z");
    if (!localMethodID) {
        LOGE("getBoolean: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallBooleanMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public void com.morningwoodsoftware.datautils.DataBundle.putBoolean(java.lang.String,boolean) */
void com_morningwoodsoftware_datautils_DataBundle::putBoolean(jobject thiz,const char* p0,bool p1)
{
    if (!mJavaVM) {
        LOGE("putBoolean: failed: no mJavaVM");
        return;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("putBoolean: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("putBoolean: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("putBoolean: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "putBoolean",
                                "(Ljava/lang/String;Z)V");
    if (!localMethodID) {
        LOGE("putBoolean: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    
    
    env->CallVoidMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public java.lang.Byte com.morningwoodsoftware.datautils.DataBundle.getByte(java.lang.String,byte) */
char com_morningwoodsoftware_datautils_DataBundle::getByte(jobject thiz,const char* p0,char p1)
{
    if (!mJavaVM) {
        LOGE("getByte: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getByte: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getByte: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getByte: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getByte",
                                "(Ljava/lang/String;B)Ljava/lang/Byte;");
    if (!localMethodID) {
        LOGE("getByte: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallByteMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public byte com.morningwoodsoftware.datautils.DataBundle.getByte(java.lang.String) */
char com_morningwoodsoftware_datautils_DataBundle::getByte(jobject thiz,const char* p0)
{
    if (!mJavaVM) {
        LOGE("getByte: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getByte: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getByte: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getByte: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getByte",
                                "(Ljava/lang/String;)B");
    if (!localMethodID) {
        LOGE("getByte: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallByteMethod(thiz, localMethodID
    
        
        ,js_p0
        
    );
}

/* public void com.morningwoodsoftware.datautils.DataBundle.putByte(java.lang.String,byte) */
void com_morningwoodsoftware_datautils_DataBundle::putByte(jobject thiz,const char* p0,char p1)
{
    if (!mJavaVM) {
        LOGE("putByte: failed: no mJavaVM");
        return;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("putByte: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("putByte: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("putByte: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "putByte",
                                "(Ljava/lang/String;B)V");
    if (!localMethodID) {
        LOGE("putByte: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    
    
    env->CallVoidMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public short com.morningwoodsoftware.datautils.DataBundle.getShort(java.lang.String) */
int com_morningwoodsoftware_datautils_DataBundle::getShort(jobject thiz,const char* p0)
{
    if (!mJavaVM) {
        LOGE("getShort: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getShort: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getShort: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getShort: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getShort",
                                "(Ljava/lang/String;)S");
    if (!localMethodID) {
        LOGE("getShort: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallShortMethod(thiz, localMethodID
    
        
        ,js_p0
        
    );
}

/* public short com.morningwoodsoftware.datautils.DataBundle.getShort(java.lang.String,short) */
int com_morningwoodsoftware_datautils_DataBundle::getShort(jobject thiz,const char* p0,int p1)
{
    if (!mJavaVM) {
        LOGE("getShort: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getShort: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getShort: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getShort: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getShort",
                                "(Ljava/lang/String;S)S");
    if (!localMethodID) {
        LOGE("getShort: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallShortMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public void com.morningwoodsoftware.datautils.DataBundle.putShort(java.lang.String,short) */
void com_morningwoodsoftware_datautils_DataBundle::putShort(jobject thiz,const char* p0,int p1)
{
    if (!mJavaVM) {
        LOGE("putShort: failed: no mJavaVM");
        return;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("putShort: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("putShort: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("putShort: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "putShort",
                                "(Ljava/lang/String;S)V");
    if (!localMethodID) {
        LOGE("putShort: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    
    
    env->CallVoidMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public char com.morningwoodsoftware.datautils.DataBundle.getChar(java.lang.String) */
char com_morningwoodsoftware_datautils_DataBundle::getChar(jobject thiz,const char* p0)
{
    if (!mJavaVM) {
        LOGE("getChar: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getChar: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getChar: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getChar: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getChar",
                                "(Ljava/lang/String;)C");
    if (!localMethodID) {
        LOGE("getChar: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallCharMethod(thiz, localMethodID
    
        
        ,js_p0
        
    );
}

/* public char com.morningwoodsoftware.datautils.DataBundle.getChar(java.lang.String,char) */
char com_morningwoodsoftware_datautils_DataBundle::getChar(jobject thiz,const char* p0,char p1)
{
    if (!mJavaVM) {
        LOGE("getChar: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getChar: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getChar: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getChar: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getChar",
                                "(Ljava/lang/String;C)C");
    if (!localMethodID) {
        LOGE("getChar: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallCharMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public void com.morningwoodsoftware.datautils.DataBundle.putChar(java.lang.String,char) */
void com_morningwoodsoftware_datautils_DataBundle::putChar(jobject thiz,const char* p0,char p1)
{
    if (!mJavaVM) {
        LOGE("putChar: failed: no mJavaVM");
        return;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("putChar: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("putChar: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("putChar: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "putChar",
                                "(Ljava/lang/String;C)V");
    if (!localMethodID) {
        LOGE("putChar: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    
    
    env->CallVoidMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public int com.morningwoodsoftware.datautils.DataBundle.getInt(java.lang.String) */
int com_morningwoodsoftware_datautils_DataBundle::getInt(jobject thiz,const char* p0)
{
    if (!mJavaVM) {
        LOGE("getInt: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getInt: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getInt: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getInt: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getInt",
                                "(Ljava/lang/String;)I");
    if (!localMethodID) {
        LOGE("getInt: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallIntMethod(thiz, localMethodID
    
        
        ,js_p0
        
    );
}

/* public int com.morningwoodsoftware.datautils.DataBundle.getInt(java.lang.String,int) */
int com_morningwoodsoftware_datautils_DataBundle::getInt(jobject thiz,const char* p0,int p1)
{
    if (!mJavaVM) {
        LOGE("getInt: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getInt: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getInt: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getInt: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getInt",
                                "(Ljava/lang/String;I)I");
    if (!localMethodID) {
        LOGE("getInt: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallIntMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public void com.morningwoodsoftware.datautils.DataBundle.putInt(java.lang.String,int) */
void com_morningwoodsoftware_datautils_DataBundle::putInt(jobject thiz,const char* p0,int p1)
{
    if (!mJavaVM) {
        LOGE("putInt: failed: no mJavaVM");
        return;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("putInt: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("putInt: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("putInt: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "putInt",
                                "(Ljava/lang/String;I)V");
    if (!localMethodID) {
        LOGE("putInt: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    
    
    env->CallVoidMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public long com.morningwoodsoftware.datautils.DataBundle.getLong(java.lang.String) */
long com_morningwoodsoftware_datautils_DataBundle::getLong(jobject thiz,const char* p0)
{
    if (!mJavaVM) {
        LOGE("getLong: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getLong: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getLong: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getLong: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getLong",
                                "(Ljava/lang/String;)J");
    if (!localMethodID) {
        LOGE("getLong: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallLongMethod(thiz, localMethodID
    
        
        ,js_p0
        
    );
}

/* public long com.morningwoodsoftware.datautils.DataBundle.getLong(java.lang.String,long) */
long com_morningwoodsoftware_datautils_DataBundle::getLong(jobject thiz,const char* p0,long p1)
{
    if (!mJavaVM) {
        LOGE("getLong: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getLong: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getLong: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getLong: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getLong",
                                "(Ljava/lang/String;J)J");
    if (!localMethodID) {
        LOGE("getLong: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallLongMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public void com.morningwoodsoftware.datautils.DataBundle.putLong(java.lang.String,long) */
void com_morningwoodsoftware_datautils_DataBundle::putLong(jobject thiz,const char* p0,long p1)
{
    if (!mJavaVM) {
        LOGE("putLong: failed: no mJavaVM");
        return;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("putLong: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("putLong: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("putLong: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "putLong",
                                "(Ljava/lang/String;J)V");
    if (!localMethodID) {
        LOGE("putLong: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    
    
    env->CallVoidMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public float com.morningwoodsoftware.datautils.DataBundle.getFloat(java.lang.String) */
float com_morningwoodsoftware_datautils_DataBundle::getFloat(jobject thiz,const char* p0)
{
    if (!mJavaVM) {
        LOGE("getFloat: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getFloat: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getFloat: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getFloat: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getFloat",
                                "(Ljava/lang/String;)F");
    if (!localMethodID) {
        LOGE("getFloat: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallFloatMethod(thiz, localMethodID
    
        
        ,js_p0
        
    );
}

/* public float com.morningwoodsoftware.datautils.DataBundle.getFloat(java.lang.String,float) */
float com_morningwoodsoftware_datautils_DataBundle::getFloat(jobject thiz,const char* p0,float p1)
{
    if (!mJavaVM) {
        LOGE("getFloat: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getFloat: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getFloat: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getFloat: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getFloat",
                                "(Ljava/lang/String;F)F");
    if (!localMethodID) {
        LOGE("getFloat: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallFloatMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public void com.morningwoodsoftware.datautils.DataBundle.putFloat(java.lang.String,float) */
void com_morningwoodsoftware_datautils_DataBundle::putFloat(jobject thiz,const char* p0,float p1)
{
    if (!mJavaVM) {
        LOGE("putFloat: failed: no mJavaVM");
        return;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("putFloat: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("putFloat: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("putFloat: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "putFloat",
                                "(Ljava/lang/String;F)V");
    if (!localMethodID) {
        LOGE("putFloat: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    
    
    env->CallVoidMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public double com.morningwoodsoftware.datautils.DataBundle.getDouble(java.lang.String,double) */
double com_morningwoodsoftware_datautils_DataBundle::getDouble(jobject thiz,const char* p0,double p1)
{
    if (!mJavaVM) {
        LOGE("getDouble: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getDouble: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getDouble: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getDouble: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getDouble",
                                "(Ljava/lang/String;D)D");
    if (!localMethodID) {
        LOGE("getDouble: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallDoubleMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public double com.morningwoodsoftware.datautils.DataBundle.getDouble(java.lang.String) */
double com_morningwoodsoftware_datautils_DataBundle::getDouble(jobject thiz,const char* p0)
{
    if (!mJavaVM) {
        LOGE("getDouble: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("getDouble: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("getDouble: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("getDouble: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "getDouble",
                                "(Ljava/lang/String;)D");
    if (!localMethodID) {
        LOGE("getDouble: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallDoubleMethod(thiz, localMethodID
    
        
        ,js_p0
        
    );
}

/* public void com.morningwoodsoftware.datautils.DataBundle.putDouble(java.lang.String,double) */
void com_morningwoodsoftware_datautils_DataBundle::putDouble(jobject thiz,const char* p0,double p1)
{
    if (!mJavaVM) {
        LOGE("putDouble: failed: no mJavaVM");
        return;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("putDouble: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("putDouble: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("putDouble: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "putDouble",
                                "(Ljava/lang/String;D)V");
    if (!localMethodID) {
        LOGE("putDouble: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    
    
    env->CallVoidMethod(thiz, localMethodID
    
        
        ,js_p0
        
        ,p1
        
    );
}

/* public void com.morningwoodsoftware.datautils.DataBundle.clear() */
void com_morningwoodsoftware_datautils_DataBundle::clear(jobject thiz)
{
    if (!mJavaVM) {
        LOGE("clear: failed: no mJavaVM");
        return;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("clear: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("clear: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("clear: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "clear",
                                "()V");
    if (!localMethodID) {
        LOGE("clear: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return;
    }

    

    
    
    env->CallVoidMethod(thiz, localMethodID
    
        
    );
}

/* public boolean com.morningwoodsoftware.datautils.DataBundle.isEmpty() */
bool com_morningwoodsoftware_datautils_DataBundle::isEmpty(jobject thiz)
{
    if (!mJavaVM) {
        LOGE("isEmpty: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("isEmpty: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("isEmpty: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("isEmpty: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "isEmpty",
                                "()Z");
    if (!localMethodID) {
        LOGE("isEmpty: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    

    return
    
    env->CallBooleanMethod(thiz, localMethodID
    
        
    );
}

/* public int com.morningwoodsoftware.datautils.DataBundle.size() */
int com_morningwoodsoftware_datautils_DataBundle::size(jobject thiz)
{
    if (!mJavaVM) {
        LOGE("size: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("size: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("size: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("size: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "size",
                                "()I");
    if (!localMethodID) {
        LOGE("size: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    

    return
    
    env->CallIntMethod(thiz, localMethodID
    
        
    );
}

/* public void com.morningwoodsoftware.datautils.DataBundle.putAll(com.morningwoodsoftware.datautils.DataBundle) */
void com_morningwoodsoftware_datautils_DataBundle::putAll(jobject thiz,jobject p0)
{
    if (!mJavaVM) {
        LOGE("putAll: failed: no mJavaVM");
        return;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("putAll: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("putAll: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("putAll: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "putAll",
                                "(Lcom/morningwoodsoftware/datautils/DataBundle;)V");
    if (!localMethodID) {
        LOGE("putAll: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return;
    }

    

    
    
    env->CallVoidMethod(thiz, localMethodID
    
        
        ,p0
        
    );
}

/* public boolean com.morningwoodsoftware.datautils.DataBundle.containsKey(java.lang.String) */
bool com_morningwoodsoftware_datautils_DataBundle::containsKey(jobject thiz,const char* p0)
{
    if (!mJavaVM) {
        LOGE("containsKey: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("containsKey: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("containsKey: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("containsKey: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetMethodID(
    
                                localClass,
                                "containsKey",
                                "(Ljava/lang/String;)Z");
    if (!localMethodID) {
        LOGE("containsKey: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    return
    
    env->CallBooleanMethod(thiz, localMethodID
    
        
        ,js_p0
        
    );
}

/* public static com.morningwoodsoftware.datautils.DataBundle com.morningwoodsoftware.datautils.DataBundle.create() */
jobject com_morningwoodsoftware_datautils_DataBundle::create()
{
    if (!mJavaVM) {
        LOGE("create: failed: no mJavaVM");
        return NULL;
    }

    JNIEnv *env = NULL;
    int status = mJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status != JNI_OK) {
        LOGD("create: failed to get JNI environment, "
             "assuming native thread");
        status = mJavaVM->AttachCurrentThread(&env, NULL);

        if (status != JNI_OK || env == NULL) {
            LOGD("create: failed to get JNI environment");
            HANDLE_EXCEPTION(env);
            return NULL;
        }
    }

    jclass localClass = JavaApplication::getInstance().findClass(env, "com/morningwoodsoftware/datautils/DataBundle");
    if (!localClass) {
        LOGE("create: failed to get class for com/morningwoodsoftware/datautils/DataBundle");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    
    jmethodID localMethodID = env->GetStaticMethodID(
    
                                localClass,
                                "create",
                                "()Lcom/morningwoodsoftware/datautils/DataBundle;");
    if (!localMethodID) {
        LOGE("create: failed to get methodID");
        HANDLE_EXCEPTION(env);
        return NULL;
    }

    

    return
    
    env->CallStaticObjectMethod(localClass, localMethodID
    
        
    );
}


