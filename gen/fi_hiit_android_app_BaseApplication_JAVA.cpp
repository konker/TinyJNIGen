/*! DO NOT EDIT THIS FILE: GENERATED BY JNIGen */

#include "fi_hiit_android_app_BaseApplication_JAVA.h"
#include "jni_util.h"


fi_hiit_android_app_BaseApplication::fi_hiit_android_app_BaseApplication(JavaVM *vm)
{
    mJavaVM = vm;
}

fi_hiit_android_app_BaseApplication::~fi_hiit_android_app_BaseApplication()
{ }


/* public static void fi.hiit.android.app.BaseApplication.toast(java.lang.String) */
void fi_hiit_android_app_BaseApplication::toast(const char* p0)
{
    LOGI("fi_hiit_android_app_BaseApplication::toast CALLED");
    int status;
    JNIEnv *env;
    bool isAttached = false;

    if (!mJavaVM) {
        LOGE("toast: failed: no mJavaVM");
        return;
    }

    status = gJavaVM->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (status < 0) {
        /*[XXX:too noisy]
        LOGD("toast: failed to get JNI environment, "
             "assuming native thread");
        */

        status = gJavaVM->AttachCurrentThread(&env, NULL);
        if (status < 0) {
            LOGE("toast: failed to attach current thread");
            return;
        }
        isAttached = true;
    }

    jclass localClass = env->FindClass("class/path/Foo");
    if (!localClass) {
        LOGE("toast: failed to get class for class/path/Foo");
        HANDLE_EXCEPTION(env);
        return -2;
    }

    jmethodID localMethodID = env->GetStaticMethodID(
                                localClass,
                                toast,
                                "(II)V");
    if (!localMethodID) {
        LOGE("cache_jni_objects: failed to get gToast_methodID");
        HANDLE_EXCEPTION(env);
        return -2;
    }

    //[TODO: cache localClass and localMethodID]

    
    // Create a string and call the Java method
    jstring js_p0 = env->NewStringUTF(p0);
    

    env->CallStaticVoidMethod(localClass, localMethodID,
        
        js_p0
        
        
    );

    // Tidy up
    if (isAttached) {
        gJavaVM->DetachCurrentThread();
    }
}


